generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Family {
  id               String         @id @default(uuid())
  name             String
  subscriptionTier String         @default("free") @map("subscription_tier")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  auditLogs        AuditLog[]
  careTasks        CareTask[]
  documents        Document[]
  members          FamilyMember[]
  insights         Insight[]
  invitations      Invitation[]
  itemLocations    ItemLocation[]
  journalEntries   JournalEntry[]
  patient          Patient?
  // Back-relations for Fact system
  factEntities     FactEntity[]
  facts            Fact[]

  @@map("families")
}

model User {
  id                     String                 @id @default(uuid())
  clerkId                String                 @unique @map("clerk_id")
  email                  String                 @unique
  firstName              String                 @map("first_name")
  lastName               String                 @map("last_name")
  userType               UserType               @default(CAREGIVER) @map("user_type")
  linkedPatientId        String?                @unique @map("linked_patient_id")
  createdAt              DateTime               @default(now()) @map("created_at")
  lastActive             DateTime?              @map("last_active")
  auditLogs              AuditLog[]
  auditLogsImpersonated  AuditLog[]             @relation("ImpersonatedBy")
  careTaskLogs           CareTaskLog[]
  careTasksAssigned      CareTask[]             @relation("AssignedTo")
  careTasksCreated       CareTask[]             @relation("CreatedBy")
  checklistItemsCreated  PatientChecklistItem[]
  checklistLogsCompleted PatientChecklistLog[]
  documentsUploaded      Document[]
  familyMembers          FamilyMember[]
  acknowledgedInsights   Insight[]
  invitationsSent        Invitation[]           @relation("InvitedBy")
  itemLocationsCreated   ItemLocation[]         @relation("CreatedBy")
  journalEntries         JournalEntry[]
  medicationLogsGiven    MedicationLog[]
  medicationsCreated     Medication[]           @relation("CreatedBy")
  linkedPatient          Patient?               @relation("PatientUser", fields: [linkedPatientId], references: [id])

  @@index([email])
  @@map("users")
}

model FamilyMember {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  familyId     String     @map("family_id")
  role         FamilyRole
  relationship String
  isActive     Boolean    @default(true) @map("is_active")
  joinedAt     DateTime   @default(now()) @map("joined_at")
  family       Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@index([familyId])
  @@map("family_members")
}

model Invitation {
  id             String           @id @default(uuid())
  familyId       String           @map("family_id")
  email          String
  role           FamilyRole
  relationship   String
  invitationType InvitationType   @default(CAREGIVER) @map("invitation_type")
  patientId      String?          @map("patient_id")
  token          String           @unique
  status         InvitationStatus @default(pending)
  invitedById    String           @map("invited_by_id")
  expiresAt      DateTime         @map("expires_at")
  acceptedAt     DateTime?        @map("accepted_at")
  createdAt      DateTime         @default(now()) @map("created_at")
  family         Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  invitedBy      User             @relation("InvitedBy", fields: [invitedById], references: [id])
  patient        Patient?         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([email])
  @@index([patientId])
  @@map("invitations")
}

model Patient {
  id                  String                 @id @default(uuid())
  familyId            String                 @unique @map("family_id")
  firstName           String                 @map("first_name")
  lastName            String                 @map("last_name")
  dateOfBirth         DateTime               @map("date_of_birth") @db.Date
  gender              String
  medicalRecordNumber String?                @map("medical_record_number")
  createdAt           DateTime               @default(now()) @map("created_at")
  checklistItems      PatientChecklistItem[]
  insights            Insight[]
  invitations         Invitation[]
  itemLocations       ItemLocation[]
  medications         Medication[]
  family              Family                 @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user                User?                  @relation("PatientUser")

  @@map("patients")
}

model JournalEntry {
  id             String            @id @default(uuid())
  familyId       String            @map("family_id")
  userId         String            @map("user_id")
  createdAt      DateTime          @default(now()) @map("created_at")
  content        String
  sentiment      JournalSentiment?
  isPrivate      Boolean           @default(false) @map("is_private")
  attachmentUrls String[]          @map("attachment_urls")
  analysisData   Json?             @map("analysis_data")
  family         Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id])

  @@index([familyId, createdAt(sort: Desc)])
  @@index([userId])
  @@map("journal_entries")
}

model Medication {
  id              String          @id @default(uuid())
  patientId       String          @map("patient_id")
  name            String
  dosage          String
  frequency       String
  scheduleTime    String[]        @map("schedule_times")
  instructions    String?
  prescribedBy    String?         @map("prescribed_by")
  startDate       DateTime        @map("start_date") @db.Date
  endDate         DateTime?       @map("end_date") @db.Date
  isActive        Boolean         @default(true) @map("is_active")
  createdById     String          @map("created_by_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  currentSupply   Int?            @map("current_supply")
  dosageAmount    Float?          @map("dosage_amount")
  dosageUnit      String?         @map("dosage_unit")
  lastRefillDate  DateTime?       @map("last_refill_date") @db.Date
  refillThreshold Int?            @default(7) @map("refill_threshold")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  logs            MedicationLog[]
  createdBy       User            @relation("CreatedBy", fields: [createdById], references: [id])
  patient         Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([patientId, isActive])
  @@map("medications")
}

model MedicationLog {
  id            String           @id @default(uuid())
  medicationId  String           @map("medication_id")
  givenById     String?          @map("given_by_id")
  completedById String?          @map("completed_by_id")
  scheduledTime DateTime         @map("scheduled_time")
  givenTime     DateTime?        @map("given_time")
  status        MedicationStatus
  notes         String?
  createdAt     DateTime         @default(now()) @map("created_at")
  givenBy       User?            @relation(fields: [givenById], references: [id])
  medication    Medication       @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@unique([medicationId, scheduledTime])
  @@index([medicationId, scheduledTime])
  @@map("medication_logs")
}

model CareTask {
  id                String           @id @default(uuid())
  familyId          String           @map("family_id")
  title             String
  description       String?
  dueDate           DateTime?        @map("due_date")
  reminderDate      DateTime?        @map("reminder_date") // When task starts appearing in daily lists
  assignedToId      String?          @map("assigned_to_id")
  createdById       String           @map("created_by_id")
  priority          CareTaskPriority @default(MEDIUM)
  status            CareTaskStatus   @default(PENDING)
  recurrenceRule    String?          @map("recurrence_rule") // Stores recurrence pattern
  recurrenceEndDate DateTime?        @map("recurrence_end_date")
  parentTaskId      String?          @map("parent_task_id") // Links instances to their recurrence template
  isRecurrenceTemplate Boolean       @default(false) @map("is_recurrence_template") // True for the original recurring task
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  logs              CareTaskLog[]
  assignedTo        User?            @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy         User             @relation("CreatedBy", fields: [createdById], references: [id])
  family            Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  parentTask        CareTask?        @relation("RecurrenceInstances", fields: [parentTaskId], references: [id])
  recurrenceInstances CareTask[]    @relation("RecurrenceInstances")

  @@index([familyId, status])
  @@index([assignedToId])
  @@index([parentTaskId])
  @@map("care_tasks")
}

model CareTaskLog {
  id        String   @id @default(uuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  action    String
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  task      CareTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@map("care_task_logs")
}

model Document {
  id            String        @id @default(uuid())
  familyId      String        @map("family_id")
  title         String
  description   String?
  type          DocumentType
  url           String
  uploadedById  String        @map("uploaded_by_id")
  parsingStatus ParsingStatus @default(PENDING) @map("parsing_status")
  parsedData    Json?         @map("parsed_data")
  tags          String[]
  createdAt     DateTime      @default(now()) @map("created_at")
  family        Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  uploadedBy    User          @relation(fields: [uploadedById], references: [id])

  @@index([familyId])
  @@map("documents")
}

model ItemLocation {
  id          String   @id @default(uuid())
  familyId    String   @map("family_id")
  patientId   String   @map("patient_id")
  itemName    String   @map("item_name")
  location    String
  description String?
  photoUrl    String?  @map("photo_url")
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([patientId])
  @@map("item_locations")
}

model Insight {
  id               String          @id @default(uuid())
  familyId         String          @map("family_id")
  patientId        String          @map("patient_id")
  type             String
  title            String
  description      String
  data             Json
  severity         InsightSeverity
  isAcknowledged   Boolean         @default(false) @map("is_acknowledged")
  acknowledgedById String?         @map("acknowledged_by_id")
  acknowledgedAt   DateTime?       @map("acknowledged_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  acknowledgedBy   User?           @relation(fields: [acknowledgedById], references: [id])
  family           Family          @relation(fields: [familyId], references: [id], onDelete: Cascade)
  patient          Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([familyId, isAcknowledged])
  @@index([patientId])
  @@map("insights")
}

model AuditLog {
  id              String   @id @default(uuid())
  familyId        String   @map("family_id")
  userId          String   @map("user_id")
  impersonatedBy  String?  @map("impersonated_by")
  action          String
  resourceType    String   @map("resource_type")
  resourceId      String?  @map("resource_id")
  metadata        Json?
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  createdAt       DateTime @default(now()) @map("created_at")
  family          Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id])
  impersonator    User?    @relation("ImpersonatedBy", fields: [impersonatedBy], references: [id])

  @@index([familyId, createdAt(sort: Desc)])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@map("audit_logs")
}

model PatientChecklistItem {
  id          String                  @id @default(uuid())
  patientId   String                  @map("patient_id")
  title       String
  description String?
  category    ChecklistCategory
  scheduledTime String?               @map("scheduled_time")
  isActive    Boolean                 @default(true) @map("is_active")
  createdById String                  @map("created_by_id")
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  logs        PatientChecklistLog[]
  createdBy   User                    @relation(fields: [createdById], references: [id])
  patient     Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, isActive])
  @@map("patient_checklist_items")
}

model PatientChecklistLog {
  id           String                @id @default(uuid())
  itemId       String                @map("item_id")
  completedById String?              @map("completed_by_id")
  completedAt  DateTime              @default(now()) @map("completed_at")
  notes        String?
  voiceNoteUrl String?               @map("voice_note_url")
  createdAt    DateTime              @default(now()) @map("created_at")
  item         PatientChecklistItem  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  completedBy  User?                 @relation(fields: [completedById], references: [id])

  @@index([itemId, completedAt(sort: Desc)])
  @@map("patient_checklist_logs")
}

enum FamilyRole {
  primary_caregiver
  caregiver
  family_member
  read_only
}

enum InvitationStatus {
  pending
  accepted
  expired
  cancelled
}

enum JournalSentiment {
  positive
  neutral
  concerned
  urgent
}

enum CareTaskPriority {
  HIGH   @map("high")
  MEDIUM @map("medium")
  LOW    @map("low")
}

enum CareTaskStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  CANCELLED   @map("cancelled")
}

enum MedicationStatus {
  GIVEN     @map("given")
  MISSED    @map("missed")
  REFUSED   @map("refused")
  SCHEDULED @map("scheduled")
}

enum DocumentType {
  MEDICAL_RECORD @map("medical_record")
  FINANCIAL      @map("financial")
  LEGAL          @map("legal")
  INSURANCE      @map("insurance")
  OTHER          @map("other")
}

enum ParsingStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  COMPLETED  @map("completed")
  FAILED     @map("failed")
}

enum InsightSeverity {
  INFO    @map("info")
  WARNING @map("warning")
  ALERT   @map("alert")
}

enum ChecklistCategory {
  MEALS            @map("meals")
  MEDICATION       @map("medication")
  EXERCISE         @map("exercise")
  HYGIENE          @map("hygiene")
  SOCIAL           @map("social")
  THERAPY          @map("therapy")
  OTHER            @map("other")
}

// --- Fact System (domain-agnostic) ---

enum FactDomain {
  MEDICAL    @map("medical")
  FINANCIAL  @map("financial")
  ESTATE     @map("estate")
  WELLBEING  @map("wellbeing")
}

enum FactStatus {
  PROPOSED    @map("proposed")
  ACTIVE      @map("active")
  REJECTED    @map("rejected")
  SUPERSEDED  @map("superseded")
}

enum FactAssertedBy {
  AI      @map("ai")
  USER    @map("user")
  SYSTEM  @map("system")
}

model FactEntity {
  id         String   @id @default(uuid())
  familyId   String   @map("family_id")
  type       String
  displayName String? @map("display_name")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  family     Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  facts      Fact[]

  @@index([familyId, type])
  @@map("fact_entities")
}

model Fact {
  id           String         @id @default(uuid())
  familyId     String         @map("family_id")
  entityId     String         @map("entity_id")
  domain       FactDomain
  entityType   String         @map("entity_type")
  key          String
  value        Json           @map("value_json")
  status       FactStatus     @default(PROPOSED)
  assertedBy   FactAssertedBy @default(AI) @map("asserted_by")
  confidence   Float          @default(0.5)
  pinned       Boolean        @default(false)
  effectiveStart DateTime?    @map("effective_start")
  effectiveEnd   DateTime?    @map("effective_end")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  family       Family         @relation(fields: [familyId], references: [id], onDelete: Cascade)
  entity       FactEntity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  sources      FactSource[]

  @@index([familyId, domain, status])
  @@index([entityId, key, status])
  @@map("facts")
}

model FactSource {
  id         String   @id @default(uuid())
  factId     String   @map("fact_id")
  sourceType String   @map("source_type") // journal|document|med|task|other
  sourceId   String   @map("source_id")
  section    String?
  spanHash   String?  @map("span_hash")
  weight     Float? 
  createdAt  DateTime @default(now()) @map("created_at")
  fact       Fact     @relation(fields: [factId], references: [id], onDelete: Cascade)

  @@index([factId])
  @@index([sourceType, sourceId])
  @@map("fact_sources")
}


enum UserType {
  CAREGIVER @map("caregiver")
  PATIENT   @map("patient")
}

enum InvitationType {
  CAREGIVER @map("caregiver")
  PATIENT   @map("patient")
}
